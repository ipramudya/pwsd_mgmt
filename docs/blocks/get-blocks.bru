meta {
  name: Get Root Blocks with Fields
  type: http
  seq: 3
}

get {
  url: {{baseUrl}}/blocks
  body: none
  auth: bearer
}

auth:bearer {
  token: {{accessToken}}
}

tests {
  test("should return 200 status", function() {
    expect(res.getStatus()).to.equal(200);
  });
  
  test("should return success response", function() {
    expect(res.getBody().success).to.equal(true);
  });
  
  test("should return blocks data with pagination", function() {
    const body = res.getBody();
    expect(body.data).to.have.property('blocks');
    expect(body.data).to.have.property('nextCursor');
    expect(body.data).to.have.property('hasNext');
    expect(body.data).to.have.property('total');
    expect(body.data.blocks).to.be.an('array');
  });
  
  test("should return both container and terminal blocks", function() {
    const body = res.getBody();
    const blockTypes = body.data.blocks.map(block => block.blockType);
    expect(blockTypes).to.include.members(['container', 'terminal']);
  });
  
  test("terminal blocks should include fields", function() {
    const body = res.getBody();
    const terminalBlocks = body.data.blocks.filter(block => block.blockType === 'terminal');
    terminalBlocks.forEach(block => {
      expect(block).to.have.property('fields');
      expect(block.fields).to.be.an('array');
    });
  });
  
  test("container blocks should not have fields property", function() {
    const body = res.getBody();
    const containerBlocks = body.data.blocks.filter(block => block.blockType === 'container');
    containerBlocks.forEach(block => {
      expect(block.fields).to.be.undefined;
    });
  });
  
  test("should return blocks owned by current user", function() {
    const body = res.getBody();
    const userId = bru.getEnvVar("userId");
    body.data.blocks.forEach(block => {
      expect(block.createdById).to.equal(userId);
    });
  });
}