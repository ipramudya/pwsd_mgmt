meta {
  name: Refresh Token
  type: http
  seq: 3
}

post {
  url: {{baseUrl}}/auth/refresh-token
  body: json
  auth: none
}

body:json {
  {
    "refreshToken": "{{refreshToken}}"
  }
}

tests {
  test("should return 200 status", function() {
    expect(res.getStatus()).to.equal(200);
  });
  
  test("should return success response", function() {
    expect(res.getBody().success).to.equal(true);
  });
  
  test("should return new tokens", function() {
    const body = res.getBody();
    expect(body.data).to.have.property('tokens');
    expect(body.data.tokens).to.have.property('accessToken');
    expect(body.data.tokens).to.have.property('refreshToken');
  });
  
  test("should return valid new tokens", function() {
    const body = res.getBody();
    expect(body.data.tokens.accessToken).to.be.a('string');
    expect(body.data.tokens.refreshToken).to.be.a('string');
    expect(body.data.tokens.accessToken.length).to.be.greaterThan(0);
    expect(body.data.tokens.refreshToken.length).to.be.greaterThan(0);
  });
  
  test("should return different tokens from previous", function() {
    const body = res.getBody();
    const oldAccessToken = bru.getEnvVar("accessToken");
    const oldRefreshToken = bru.getEnvVar("refreshToken");
    expect(body.data.tokens.accessToken).to.not.equal(oldAccessToken);
    expect(body.data.tokens.refreshToken).to.not.equal(oldRefreshToken);
  });
  
  test("should return 401 for invalid refresh token", function() {
    // Test will fail on valid token
    // In practice, send expired or invalid refresh token
  });
  
  test("should return 400 for validation errors", function() {
    // Test will fail on valid data
    // In practice, send empty refreshToken
  });
}

script:post-response {
  if (res.getStatus() === 200) {
    const body = res.getBody();
    bru.setEnvVar("accessToken", body.data.tokens.accessToken);
    bru.setEnvVar("refreshToken", body.data.tokens.refreshToken);
  }
}