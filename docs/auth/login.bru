meta {
  name: Login User
  type: http
  seq: 2
}

post {
  url: {{baseUrl}}/auth/login
  body: json
  auth: none
}

body:json {
  {
    "username": "{{username}}",
    "password": "{{password}}"
  }
}

tests {
  test("should return 200 status", function() {
    expect(res.getStatus()).to.equal(200);
  });
  
  test("should return success response", function() {
    expect(res.getBody().success).to.equal(true);
  });
  
  test("should return user data and tokens", function() {
    const body = res.getBody();
    expect(body.data).to.have.property('user');
    expect(body.data).to.have.property('tokens');
    expect(body.data.user).to.have.property('uuid');
    expect(body.data.user).to.have.property('username');
    expect(body.data.user).to.have.property('lastLoginAt');
    expect(body.data.tokens).to.have.property('accessToken');
    expect(body.data.tokens).to.have.property('refreshToken');
  });
  
  test("should not return password in response", function() {
    const body = res.getBody();
    expect(body.data.user).to.not.have.property('password');
  });
  
  test("should update lastLoginAt timestamp", function() {
    const body = res.getBody();
    const lastLoginAt = new Date(body.data.user.lastLoginAt);
    expect(lastLoginAt).to.be.instanceof(Date);
    expect(lastLoginAt.getTime()).to.not.be.NaN;
  });
  
  test("should return valid tokens", function() {
    const body = res.getBody();
    expect(body.data.tokens.accessToken).to.be.a('string');
    expect(body.data.tokens.refreshToken).to.be.a('string');
    expect(body.data.tokens.accessToken.length).to.be.greaterThan(0);
    expect(body.data.tokens.refreshToken.length).to.be.greaterThan(0);
  });
  
  test("should return 401 for invalid credentials", function() {
    // Test will fail on valid credentials
    // In practice, send wrong username/password
  });
  
  test("should return 400 for validation errors", function() {
    // Test will fail on valid data
    // In practice, send empty username/password
  });
}

script:post-response {
  if (res.getStatus() === 200) {
    const body = res.getBody();
    bru.setEnvVar("accessToken", body.data.tokens.accessToken);
    bru.setEnvVar("refreshToken", body.data.tokens.refreshToken);
    bru.setEnvVar("userId", body.data.user.uuid);
  }
}